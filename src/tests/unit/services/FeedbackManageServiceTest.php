<?php
/**
 * Created by PhpStorm.
 * User: User
 * Date: 07.05.2018
 * Time: 11:05
 */

class FeedbackManageServiceTest extends \Codeception\Test\Unit
{

    private $feedbackForm;
    private $service;
    private $observer;
    private $feedback;


    public function setUp()
    {
        $this->service=Yii::$container->get(\egor260890\feedback\services\FeedbackManageService::class);
        $this->feedbackForm=new \egor260890\feedback\forms\FeedbackForm();
        $this->feedbackForm->name='name';
        $this->feedbackForm->tel='tel';
        $this->feedbackForm->email='email';
        $this->feedbackForm->message='message';
        $this->feedbackForm->company_name='company_name';
        $this->observer=$this->getMockForAbstractClass(\egor260890\feedback\listeners\FeedbackObserverInterface::class,[],'Observer',true,true,true,['update']);
        $this->feedback=$this->getMockForAbstractClass(\egor260890\feedback\entities\Feedback::class,[],'Feedback');
        return parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreate(){
        $feedback=$this->service->create($this->feedbackForm);
        $this->assertInstanceOf(\egor260890\feedback\entities\FeedbackInterface::class,$feedback);
        $this->assertEquals($feedback->getName(),'name');
        $this->assertEquals($feedback->getTel(),'tel');
        $this->assertEquals($feedback->getEmail(),'email');
        $this->assertEquals($feedback->getMessage(),'message');
        $this->assertEquals($feedback->getCompany_name(),'company_name');
    }

    public function testSwitchStatus(){
        $feedback=$this->service->create($this->feedbackForm);
        $this->assertInstanceOf(\egor260890\feedback\entities\FeedbackInterface::class,$feedback);
        $this->assertTrue($feedback->isUnreviewed());
        $this->service->viewed($feedback->id);
        $feedback=$this->service->findModel($feedback->id);
        $this->assertFalse($feedback->isUnreviewed());
        $this->service->unreviewed($feedback->id);
        $feedback=$this->service->findModel($feedback->id);
        $this->assertTrue($feedback->isUnreviewed());
    }

    public function testFindModel(){
        $feedback=$this->service->create($this->feedbackForm);
        $f=$this->service->findModel($feedback->id);
        $this->assertEquals($f->name,$feedback->name);
        $this->assertEquals($f->tel,$feedback->tel);
        $this->assertEquals($f->email,$feedback->email);
        $this->assertEquals($f->message,$feedback->message);
        $this->assertEquals($f->company_name,$feedback->company_name);
        $this->expectException(\egor260890\feedback\exceptions\NotFoundException::class);
        $this->expectExceptionMessage('Feedback is not found');
        $this->service->findModel(PHP_INT_MAX);
    }


    public function testAttachObserver(){
        $resultUpdate=null;
        $this->observer->expects($this->once())
            ->method('update')
            ->willReturnCallback(function(\egor260890\feedback\entities\FeedbackInterface $feedback) use (&$resultUpdate){
                $resultUpdate=$feedback;
                return $feedback;
            });
        $this->assertTrue($this->service->attach($this->observer));
        $this->service->notify($this->feedback);
        $this->assertEquals($resultUpdate,$this->feedback);
    }

    public function testAttachEmpty(){
        $resultUpdate=null;
        $this->observer->expects($this->any())
            ->method('update')
            ->willReturnCallback(function(\egor260890\feedback\entities\FeedbackInterface $feedback) use (&$resultUpdate){
                $resultUpdate=$feedback;
                return $feedback;
            });
        $this->service->attachMany([]);
        $this->service->notify($this->feedback);
        $this->assertNotEquals($resultUpdate,$this->feedback);
        $this->assertNull($resultUpdate);
    }

    public function testAttachManyArray(){
        $resultUpdate=null;
        $this->observer->expects($this->any())
            ->method('update')
            ->willReturnCallback(function(\egor260890\feedback\entities\FeedbackInterface $feedback) use (&$resultUpdate){
                $resultUpdate[]=$feedback;
                return $feedback;
            });
        $this->service->attachMany([$this->observer,clone $this->observer,clone $this->observer,get_class(clone $this->observer)]);
        $this->service->detach($this->observer);
        $this->service->notify($this->feedback);
        $this->assertEquals(count($resultUpdate),2);
        $resultUpdate=null;
        $this->service->detach($this->observer,true);
        $this->service->notify($this->feedback);
        $this->assertNull($resultUpdate);
        $this->service->attachMany(get_class($this->observer));
    }

    public function testAttachManySingle(){
        $resultUpdate=null;
        $this->observer->expects($this->any())
            ->method('update')
            ->willReturnCallback(function(\egor260890\feedback\entities\FeedbackInterface $feedback) use (&$resultUpdate){
                $resultUpdate=$feedback;
                return $feedback;
            });
        $this->service->attachMany($this->observer);
    }

    public function testAttachManyCallback(){
        $resultUpdate=null;
        $this->observer->expects($this->any())
            ->method('update')
            ->willReturnCallback(function(\egor260890\feedback\entities\FeedbackInterface $feedback) use (&$resultUpdate){
                $resultUpdate=$feedback;
                return $feedback;
            });
        $this->service->attachMany(function (){
            return [$this->observer,clone $this->observer];
        });
        $this->service->notify($this->feedback);
        $this->assertEquals($resultUpdate,$this->feedback);
    }

    public function testAttachManyException(){
        $this->expectExceptionMessage('observer not implement FeedbackObserverInterface');
        $this->expectException(RuntimeException::class);
        $this->service->attachMany(true);
        $this->service->attachMany(1);
        $this->service->attachMany('test');
        $this->service->attachMany(['test','test2']);
    }

    public function testDetachObserver(){
        $resultUpdate=null;
        $this->observer->expects($this->any())
            ->method('update')
            ->willReturnCallback(function(\egor260890\feedback\entities\FeedbackInterface $feedback) use (&$resultUpdate){
                $resultUpdate=$feedback;
                return $feedback;
            });
        $this->assertTrue($this->service->attach($this->observer));
        $this->service->detach($this->observer);
        $this->service->notify($this->feedback);
        $this->assertNotEquals($resultUpdate,$this->feedback);
        $this->assertNull($resultUpdate);
    }



}